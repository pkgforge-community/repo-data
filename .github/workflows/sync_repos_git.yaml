name: ‚ôªÔ∏è Sync üóÉÔ∏è

permissions:
  contents: write

on:
  workflow_call:
    inputs:
      upstream-git-repo:
        description: Upstream GIT URL (Must be able to git clone $URL)
        type: string
        required: true
      git-checkout-tag:
        description: Checkout a Specific Tag (Specify an exact tag or specify 'LATEST_STABLE') [Default==HEAD]
        type: string
        default: "HEAD"
        required: false
      git-fetch-depth:
        description: Git clone depth (Use 0 for Complete History) [Default==1]
        type: number
        default: 1
        required: false
      git-filter-blob:
        description: Filter Blobs (Speeds Up Cloning) [Default==True]
        type: boolean
        default: true
        required: false
 
jobs:
#------------------------------------------------------------------------------------#
  sync:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:

      - name: Checking [${{ inputs.upstream-git-repo }}<==>${{ github.repository }}]
        env:
          GH_TOKEN: "${{ github.token }}"
          GITHUB_TOKEN: "${{ github.token }}"
        run: |
          ##presets
          set +x ; set +e
          #-------------#
          ##GITHUB_REPOSITORY [Exists?]
           if [[ -z "${GITHUB_REPOSITORY//[[:space:]]/}" ]]; then
              echo -e "\n[‚úó] FATAL: Failed to Get \$GITHUB_REPOSITORY\n"
              echo "CONTINUE_GHRUN=FALSE" >> "${GITHUB_ENV}"
             exit 1
           elif echo "${GITHUB_REPOSITORY}" | grep -qiE 'github.com'; then
              GITHUB_REPOSITORY="$(echo "${GITHUB_REPOSITORY}" | sed -E 's|^(https://github.com/)?([^/]+/[^/]+).*|\2|' | tr -d '[:space:]')"
              export GITHUB_REPOSITORY
              echo "GITHUB_REPOSITORY=${GITHUB_REPOSITORY}" >> "${GITHUB_ENV}"
           fi
          ##GITHUB_REPOSITORY [Is a Fork?]
           if [[ "$(gh repo view "${GITHUB_REPOSITORY}" --json isFork -q '.isFork' | tr -d '[:space:]')" == "true" ]]; then
              echo -e "\n[‚úó] FATAL: \$GITHUB_REPOSITORY must NOT be a Fork\n"
              echo "CONTINUE_GHRUN=FALSE" >> "${GITHUB_ENV}"
             exit 1
           fi
          ##Checkout
           CHECKOUT_TAG="$(echo "${{ inputs.git-checkout-tag }}" | sed -E 's/^[[:space:]]+|[[:space:]]+$//g')"
           export CHECKOUT_TAG
           if [[ -n "${CHECKOUT_TAG+x}" ]]; then
             echo "CHECKOUT_TAG=${CHECKOUT_TAG}" >> "${GITHUB_ENV}"
           else
             echo "CHECKOUT_TAG=_NA_" >> "${GITHUB_ENV}"
           fi
          ##DEPTH
           FETCH_DEPTH="$(echo "${{ inputs.git-fetch-depth }}" | tr -cd '0-9')"
           export FETCH_DEPTH
           if [[ "${#FETCH_DEPTH}" -eq 0 ]]; then 
             echo "FETCH_DEPTH=0" >> "${GITHUB_ENV}"
           elif [[ "${#FETCH_DEPTH}" -ge 1 ]]; then
             echo "FETCH_DEPTH=${FETCH_DEPTH}" >> "${GITHUB_ENV}"
           else
             echo -e "\n[‚úó] FATAL: ${FETCH_DEPTH} is NOT a Valid Value\n"
             echo "CONTINUE_GHRUN=FALSE" >> "${GITHUB_ENV}"
            exit 1
           fi
          ##Filter Blob
           FILTER_BLOB="$(echo "${{ inputs.git-filter-blob }}" | tr -d '[:space:]')"
           export FILTER_BLOB
           if [[ "${FILTER_BLOB,,}" == "true" ]]; then
             echo "FILTER_BLOB=true" >> "${GITHUB_ENV}"
           elif [[ "${FILTER_BLOB,,}" == "false" ]]; then
             echo "FILTER_BLOB=false" >> "${GITHUB_ENV}"
           fi
          ##UPSTREAM_REPO
           UPSTREAM_REPO="$(echo "${{ inputs.upstream-git-repo }}" | tr -d '[:space:]')"
           export UPSTREAM_REPO
           if [[ "${#UPSTREAM_REPO}" -gt 5 ]]; then
             echo "UPSTREAM_REPO=${UPSTREAM_REPO}" >> "${GITHUB_ENV}"
           else
             echo -e "\n[‚úó] FATAL: ${UPSTREAM_REPO} is NOT a Valid Value\n"
             echo "CONTINUE_GHRUN=FALSE" >> "${GITHUB_ENV}"
            exit 1
           fi
        continue-on-error: false

      - name: Cloning Current Repo
        if: env.CONTINUE_GHRUN != 'FALSE'
        uses: actions/checkout@v4
        with:
          path: main
          fetch-depth: "1"
          filter: "blob:none"

      - name: Setting up ENV
        if: env.CONTINUE_GHRUN != 'FALSE'
        run: |
          ##presets
          set +x ; set +e
          #-------------#
          ##CoreUtils
          sudo apt update -y -qq
          sudo apt install bc coreutils curl dos2unix fdupes jq moreutils rsync util-linux wget -y -qq
          sudo apt install bc coreutils curl dos2unix fdupes jq moreutils rsync util-linux wget -y -qq
          #temp
          SYSTMP="$(dirname $(mktemp -u))" && export SYSTMP="${SYSTMP}"
          echo "SYSTMP=${SYSTMP}" >> "${GITHUB_ENV}"
          echo "GH_PAGER=" >> "${GITHUB_ENV}"
          echo "GIT_TERMINAL_PROMPT=0" >> "${GITHUB_ENV}"
          echo "GIT_ASKPASS=/bin/echo" >> "${GITHUB_ENV}"
          gh config set prompt disabled
          ##User-Agent
          USER_AGENT="$(curl -qfsSL 'https://raw.githubusercontent.com/pkgforge/devscripts/refs/heads/main/Misc/User-Agents/ua_firefox_macos_latest.txt')" && export USER_AGENT="${USER_AGENT}"
          echo "USER_AGENT=${USER_AGENT}" >> "${GITHUB_ENV}"
          echo "GIT_HTTP_USER_AGENT=${USER_AGENT}" >> "${GITHUB_ENV}"
        continue-on-error: true

      - name: Syncing "${{ github.repository }}" <-- "(${{ env.UPSTREAM_REPO }})"
        if: env.CONTINUE_GHRUN != 'FALSE'
        run: |
          #Presets
          set +x ; set +e
          #--------------#
          ##Main
          WORK_DIR="$(mktemp -d)" && pushd "${WORK_DIR}" &>/dev/null
           #Clone
            for i in {1..20}; do
              rm -rf "./TEMPREPO" 2>/dev/null
              if [[ "${FILTER_BLOB,,}" != "false" ]]; then
                #git clone --bare --filter="blob:none" --depth="${FETCH_DEPTH:-0}" "${UPSTREAM_REPO}" "./TEMPREPO" &&\
                #cd "./TEMPREPO" && git fetch --tags --prune && break
                if [[ "${#FETCH_DEPTH}" -eq 0 ]]; then
                   echo -e "\n Cloning... (Blob=none|Depth=all) [${i}/20]"
                   git clone --filter="blob:none" --verbose "${UPSTREAM_REPO}" "./TEMPREPO" && break
                elif [[ -n "${FETCH_DEPTH+x}" ]]; then
                   echo -e "\n Cloning... (Blob=none|Depth=${FETCH_DEPTH}) [${i}/20]"
                   git clone --filter="blob:none" --depth="${FETCH_DEPTH}" --verbose "${UPSTREAM_REPO}" "./TEMPREPO" && break
                fi
              else
                if [[ "${#FETCH_DEPTH}" -eq 0 ]]; then
                   echo -e "\n Cloning... (Blob=true|Depth=all) [${i}/20]"
                   git clone --verbose "${UPSTREAM_REPO}" "./TEMPREPO" && break
                elif [[ -n "${FETCH_DEPTH+x}" ]]; then
                   echo -e "\n Cloning... (Blob=true|Depth=${FETCH_DEPTH}) [${i}/20]"
                   git clone --depth="${FETCH_DEPTH}" --verbose "${UPSTREAM_REPO}" "./TEMPREPO" && break
                fi
              fi
            done
           #Restore 
            pushd "${WORK_DIR}" &>/dev/null
            for i in {1..200}; do
              echo -e "\n Restoring... [${i}/200]" && git --git-dir="${WORK_DIR}/TEMPREPO/.git" restore --source="HEAD" ":/" && break
            done
           #Tags
            for i in {1..20}; do
              echo -e "\n Fetching Tags... [${i}/20]" && git --git-dir="${WORK_DIR}/TEMPREPO/.git" fetch --tags && break
            done
           #Commits
            pushd "${WORK_DIR}" &>/dev/null
            LATEST_COMMIT="$(git --git-dir="${WORK_DIR}/TEMPREPO/.git" rev-parse 'HEAD' | tr -d '[:space:]')"
            LATEST_COMMIT_M="$(git --git-dir="${WORK_DIR}/TEMPREPO/.git" --no-pager log -1 --pretty="%B" | sed -e '/^[[:space:]]*$/d;1q')"
            PREV_COMMIT="$(cat "${GITHUB_WORKSPACE}/main/.github/LATEST_COMMIT.txt" 2>/dev/null | tr -d '[:space:]')"
            LATEST_TAG="$(git --git-dir="${WORK_DIR}/TEMPREPO/.git" describe --tags "$(git --git-dir="${WORK_DIR}/TEMPREPO/.git" rev-list --tags --max-count=1)" | sed -E 's/^[[:space:]]+|[[:space:]]+$//g')"
            export LATEST_COMMIT LATEST_COMMIT_M LATEST_TAG PREV_COMMIT
            echo "LATEST_COMMIT=${LATEST_COMMIT}" >> "${GITHUB_ENV}"
            echo "LATEST_COMMIT_M=${LATEST_COMMIT_M}" >> "${GITHUB_ENV}"
            echo "PREV_COMMIT=${PREV_COMMIT}" >> "${GITHUB_ENV}"
            echo -e "\n[+] Commit: ${LATEST_COMMIT} (${LATEST_COMMIT_M})"
            echo -e "[+] Previous: ${PREV_COMMIT}"
            echo -e "[+] Tag: ${LATEST_TAG}\n"
           #Checkout
            pushd "${WORK_DIR}/TEMPREPO" &>/dev/null
              if [[ "${CHECKOUT_TAG}" == "LATEST_STABLE" ]]; then
                 git checkout "${LATEST_TAG}" || \
                 {
                    echo -e "\n[-] FATAL: Failed to Checkout ${CHECKOUT_TAG}\n"
                    echo "CONTINUE_GHRUN=FALSE" >> "${GITHUB_ENV}"
                   exit 1
                 }
              elif [[  -n "${CHECKOUT_TAG+x}" && "${CHECKOUT_TAG}" != "_NA_" && "${CHECKOUT_TAG}" != "HEAD" ]]; then
                 git checkout "${CHECKOUT_TAG}" || \
                 {
                    echo -e "\n[-] FATAL: Failed to Checkout ${CHECKOUT_TAG}\n"
                    echo "CONTINUE_GHRUN=FALSE" >> "${GITHUB_ENV}"
                   exit 1
                 }
              fi
            pushd "${WORK_DIR}" &>/dev/null
           #Sanity
           if [[ "$(echo "${LATEST_COMMIT}" | tr -d '[:space:]' | wc -c)" -eq 40 ]]; then
             git --git-dir="${WORK_DIR}/TEMPREPO/.git" --no-pager log -1 --pretty="%B"
             if [ "${LATEST_COMMIT}" != "${PREV_COMMIT}" ]; then
               #Sync Repo
                pushd "${WORK_DIR}/TEMPREPO" &>/dev/null
                echo "${LATEST_COMMIT}" | tr -d '[:space:]' > "${GITHUB_WORKSPACE}/main/.github/LATEST_COMMIT.txt"
                echo "${LATEST_COMMIT_M}" > "${GITHUB_WORKSPACE}/main/.github/LATEST_COMMIT_M.txt"
                echo "${LATEST_TAG}" > "${GITHUB_WORKSPACE}/main/.github/LATEST_TAG.txt"
                git --git-dir="${WORK_DIR}/TEMPREPO/.git" for-each-ref --sort='-committerdate' --format '%(refname:short)==>(%(objectname))[%(committerdate:short)]' "refs/tags" |\
                sed -E 's/^[[:space:]]+|[[:space:]]+$//g' | tee "${GITHUB_WORKSPACE}/main/.github/TAGS.txt"
                git --git-dir="${WORK_DIR}/TEMPREPO/.git" for-each-ref --sort='-committerdate' --format '%(refname:short)' "refs/tags" | sed -E 's/^[[:space:]]+|[[:space:]]+$//g' | head -n 1 > "${GITHUB_WORKSPACE}/main/.github/LATEST_VERSION.txt"
                #echo "${LATEST_TAG}" > "${GITHUB_WORKSPACE}/main/.github/LATEST_VERSION.txt"
                sed '/^$/d' -i "${GITHUB_WORKSPACE}/main/.github/LATEST_COMMIT.txt"
                rm -rfv "${WORK_DIR}/TEMPREPO/.git/" "./.githooks/" "./.github/" 2>/dev/null
                rsync -achLv --remove-source-files --exclude="./.git/**" --exclude="./.github/**" "./" "${GITHUB_WORKSPACE}/main/"
             fi
             #pushd "${WORK_DIR}/TEMPREPO/" &>/dev/null &&\
             #git remote add target "https://x-access-token:${{ github.token }}@github.com/${GITHUB_REPOSITORY}.git"
             #git push --force --prune target "refs/heads/*:refs/heads/*" "refs/tags/*:refs/tags/*"
           else
              echo -e "\n[‚úó] FATAL: ${UPSTREAM_REPO} was NOT Cloned Successfully\n"
              echo "CONTINUE_GHRUN=FALSE" >> "${GITHUB_ENV}"
             exit 1
           fi
          popd &>/dev/null
        continue-on-error: true

      - name: Get DateTime & Purge files (=> 95 MB)
        if: env.CONTINUE_GHRUN != 'FALSE'
        run: |
          #Presets
          set +x ; set +e
          #--------------#
          UTC_TIME="$(TZ='UTC' date +'%Y-%m-%d_%I_%M_%S_%p' | tr -d '[:space:]')"
          echo "UTC_TIME=${UTC_TIME}" >> "${GITHUB_ENV}"
        continue-on-error: true

      - uses: stefanzweifel/git-auto-commit-action@v7
        if: env.CONTINUE_GHRUN != 'FALSE'
        with:
          repository: ./main
          #commit_message: "‚Äé‚Äé‚Äè‚Äè‚Äé ‚Äé"
          commit_message: "${{ env.LATEST_COMMIT_M }}"
          #push_options: '--force'
          #push_options: '--mirror'
        continue-on-error: true
